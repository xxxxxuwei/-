Metadata-Version: 1.1
Name: pyTSEB
Version: 1.0.0
Summary: Two Source Energy Balance (TSEB) Models to estimate sensible and latent heat flux (evapotranspiration) from radiometric surface temperature data
Home-page: https://github.com/hectornieto/pyTSEB/
Author: Hector Nieto
Author-email: hector.nieto.solana@gmail.com
License: GPL
Description: # PyTSEB
        
        ## Synopsis
        
        This project contains Two Source Energy Models (Priestley-Taylor **TSEB-PT**, 
        Dual Time Difference **DTD** and TSEB with component soil and canopy temperatures **TSEB-2T**) 
        for estimating sensible and latent heat flux (evapotrannpiration) based on measurements of radiometric surface temperature. 
        
        The project consists on 
        
        1. lower-level modules with the basic functions needed in any resistance energy balance model 
        
        2. higher-level scripts for easily running TSEB with tabulated data and/or satellite/airborne imagery.
        
        ## Code Example
        ### High-level example
        
        The easiest way to get a feeling of TSEB and its configuration is throuh the provided ipython/jupyter notebooks. 
        In a terminal shell, navigate to your working folder and type
        
        - `jupyter notebook ProcessPointTimeSeries.ipynb` 
        >for configuring and running TSEB over a time series of tabulated data
        
        - `jupyter notebook ProcessLocalImage.ipynb` 
        >for configuring and running TSEB over an image/scene using local meteorological data
        
        In addition, you can also run TSEB with the scripts *MAIN_TSEB_LocalImage.py* and *MAIN_TSEB_PointTimeSeries.py*, 
        which will read an input configuration file (defaults are *Config_LocalImage.txt* and *Config_PointTimeSeries.txt* respectively). 
        You can edit these configuration files or make a copy to fit your data and site characteristics and either run any of 
        these two scripts in a python GUI or in a terminal shell:
        
        - `python MAIN_TSEB_ImageLocal.py <configuration file>`
        > where \<configuration file> points to a customized configuration file... leave it black if you want to use the default 
        file *Config_LocalImage.txt*
        
        - `python MAIN_TSEB_PointTimeSeries.py <configuration file>`
        > where \<configuration file> points to a customized configuration file... leave it black if you want to use the default 
        file *Config_PointTimeSeries.txt*
        
        ### Low-level example
        ```python
        import TSEB
        TSEB.TSEB_PT(Tr_K, vza, Ta_K, u, ea, p, Sdn_dir, Sdn_dif, fvis, fnir, sza, Lsky, LAI, hc, emisVeg, emisGrd, spectraVeg, spectraGrd, z_0M, d_0, zu, zt)
        ```
        
        >where 
        Tr_K: Land Surface Temperature (Kelvin),
        vza: View Zenith Angle (Degrees),
        Ta_K: Air temperature above the canopy (Kelvin),
        u: Wind speed above the canopy (m s-1),
        ea: Water vapour pressure above the canopy (mb),
        p: Atmospheric pressure (mb)
        Sdn: Incoming solar radiation (W m-2),
        sza: Solar Zenith Angle (Degrees),
        Lsky: Downwelling atmospheric longwave radiation (W m-2),
        LAI: Effective Leaf Area Index (m2 m-2),
        hc:  Canopy height (m),
        emisVeg: leaf emissivity,
        emisGrd: soil emissivity,
        spectraVeg: leaf spectrum, 
        >>spectraVeg= dict('rho_leaf_vis'=leaf bihemispherical reflectance in the visible (400-700 nm), 
        'tau_leaf_vis'= leaf bihemispherical transmittance in the visible (400-700nm), 
        'rho_leaf_nir'=leaf bihemispherical reflectance in the optical infrared (700-2500nm),
        'tau_leaf_nir'= leaf bihemispherical reflectance in the optical infrared (700-2500nm).
        
        >spectraGrd: soil spectrum,
        >>spectraGrd= dict('rho rsoilv'=soil bihemispherical reflectance in the visible (400-700 nm),
        'rsoiln'=soil bihemispherical reflectance in the optical infrared (700-2500nm)
        
        >z_0M: Aerodynamic surface roughness length for momentum transfer (m),
        d_0: Zero-plane displacement height (m),
        zu: Height of measurement of windspeed (m),
        zt: Height of measurement of air temperature (m)
        
        Calculates the single angle Priestley Taylor TSEB fluxes with resistances in series and returns the following:
        
        >[Quality flag,
        Soil Temperature (Kelvin),
        Canopy Temperature (Kelvin),
        Air temperature at the canopy interface (Kelvin),
        Soil net shortwave radiation (W m-2),
        Canopy net shortwave radiation (W m-2),
        Soil net longwave radiation (W m-2),
        Canopy net longwave radiation (W m-2),
        Canopy latent heat flux (W m-2),
        Canopy sensible heat flux (W m-2),
        Soil latent heat flux (W m-2),
        Soil sensible heat flux (W m-2),
        Soil heat flux (W m-2),
        Soil aerodynamic resistance to heat transport (s m-1),
        Bulk canopy aerodynamic resistance to heat transport (s m-1),
        Aerodynamic resistance to heat transport (s m-1),
        Friction velocity (m s-1),
        Monin-Obuhkov length (m),
        number of iterations until convergence]
           
        ## Basic Contents
        ### High-level modules
        - *.src/pyTSEB.py*, class object for TSEB scripting
        
        - *ProcessPointTimeSeries.ipynb* and *ProcessLocalImage.ipynb* notebooks for using TSEB and configuring 
        TSEB through a Graphical User Interface, GUI
        
        - *MAIN_TSEB_ImageLocal.py* and *MAIN_TSEB_PointTimeSeries.py*, high level scripts for running TSEB 
        through a configuration file (*Config_ImageLocal.txt* or *Config_PointTimeSeries.txt*)
        
        - *TSEB_ProcessPointTimeSeries.ipynb* notebook for more details about the high-level TSEB programming
        
        - *pyTSEB_in_Detail.ipynb* notebook for a closer look at the low-level and high-level TSEB code
        
        - *TSEB_and_Resistances.ipynb* notebook for undertanding the TSEB model and the estimation of resistances
        
        ### Low-level modules
        The low-level modules in this project are aimed for customisation and more flexibility in running TSEB. 
        The following modules are included
        
        - *.src/TSEB.py*
        > core functions for runnig different TSEB models (`TSEB_PT (*args,**kwargs)`, `TSEB_2T(*args,**kwargs)`, 
        `DTD (*args,**kwargs)`), or a One Source Energy Balance model (`OSEB(*args,**kwargs)`). 
        
        - *.src/netRadiation.py*
        > functions for estimating net radiation and its partitioning between soil and canopy
        
        - *.src/resistances.py*
        > functions for estimating the different resistances for momemtum and heat transport and surface roughness
        
        - *.src/MOsimilarity.py*
        > functions for computing adiabatic corrections for heat and momentum transport, 
        Monin-Obukhov length, friction velocity and wind profiles
        
        - *.src/ClumpingIndex.py*
        > functions for estimating the canopy clumping index and get effective values of Leaf Area Index
        
        - *.src/meteoUtils.py*
        > functions for estimating meteorolgical-related variables such as density of air, 
        heat capacity of air or latent heat of vaporization.
        
        ## Installation
        
        Download and copy the project in your local system, then type
        
        `python setup.py install` 
        
        if you want to install pyTSEB and its low-level modules in your python distribution. 
        
        The following python libraries will be required for running TSEB over an image:
        
        - Numpy
        - GDAL
         
        
        ## API Reference
        see pydocs at each module
        
        ## Tests
        The folder *./Input* contains examples for running TSEB in a tabulated time series (*BalsaBlanca_Input.txt*) 
        and in an image (*20140809_gallo_lodi_\*.tif*). Just run the high-level scripts with the configuration files 
        provied by default and compare the resulting outputs with the files stored in *./Output/*
        
        ## Contributors
        - **Hector Nieto** <hnieto@ias.csic.es> <hector.nieto.solana@gmail.com> main developer
        - **William P. Kustas**
        
        ## License
        pyTSEB: a Python Two Source Energy Balance Model
        
        Copyright 2016 Hector Nieto and contributors.
            
        This program is free software: you can redistribute it and/or modify
        it under the terms of the GNU General Public License as published by
        the Free Software Foundation, either version 3 of the License, or
        (at your option) any later version.
        
        This program is distributed in the hope that it will be useful,
        but WITHOUT ANY WARRANTY; without even the implied warranty of
        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        GNU General Public License for more details.
        
        You should have received a copy of the GNU General Public License
        along with this program.  If not, see <http://www.gnu.org/licenses/>.
        
Keywords: TSEB,Two Source Energy Balance,Resistance Energy Balance,OSEB,One Source Energy Balance,DTD,Dual Time Differenced,Remote Sensing
Platform: UNKNOWN
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Science/Research
Classifier: Topic :: Scientific/Engineering :: Agricultural Science
Classifier: Topic :: Scientific/Engineering :: Hydrology
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Classifier: License :: OSI Approved :: GNU Library or Lesser General Public License (LGPL)
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 2
